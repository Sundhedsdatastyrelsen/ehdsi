networks:
  monitoring:
    name: monitoring

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring

  # Loki for log aggregation
  loki:
    image: grafana/loki:3.5
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    networks:
      - monitoring

  # Promtail for log collection
  promtail:
    image: grafana/promtail:3.5
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail:/etc/promtail
      - promtail_data:/tmp # for the "positions" file that remembers what logs are sent to loki
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring
    depends_on:
      - loki

  # Grafana for visualization
  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # - GF_SECURITY_ADMIN_USER=admin
      # - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-pyroscope-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Memcached for Tempo caching
  memcached:
    image: memcached:1.6-alpine
    container_name: memcached
    restart: unless-stopped
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use
    networks:
      - monitoring

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: &tempoImage grafana/tempo:2.8.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo_data:/var/tempo

  # Grafana Tempo for distributed tracing with local storage
  tempo:
    image: *tempoImage
    container_name: tempo
    restart: unless-stopped
    ports:
      - "16686:16686" # tempo query frontend
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./tempo:/etc/tempo
      - tempo_data:/var/tempo
    networks:
      - monitoring
    depends_on:
      - memcached
      - tempo-init

  # node-exporter for host VM metrics
  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    restart: unless-stopped
    pid: host # Use the host PID namespace
    cap_add:
     - SYS_TIME
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - monitoring

  # Pyroscope for continuous profiling
  pyroscope:
    image: grafana/pyroscope:1.14.0
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  tempo_data:
  loki_data:
  promtail_data:
