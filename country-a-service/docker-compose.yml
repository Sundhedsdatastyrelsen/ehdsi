networks:
  epps-backend:
    name: epps
    external: true
  monitoring:
    name: monitoring

services:
  epps-country-a:
    image: ghcr.io/sundhedsdatastyrelsen/ehdsi/epps-country-a:latest
    build: .
    container_name: epps-country-a
    restart: unless-stopped
    ports:
      - "8180:8080"
      # - "5008:5008"
    environment:
      # JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=*:5008,server=y,suspend=n"
      SPRING_PROFILES_ACTIVE: "docker"
      CPR_ENDPOINT_URL: "${CPR_ENDPOINT_URL}"
      FMK_ENDPOINT_URL: "${FMK_ENDPOINT_URL}"
      FSK_ENDPOINT_URL: "${FSK_ENDPOINT_URL}"
      AUTH_REGISTRY_ENDPOINT_URL: "${AUTH_REGISTRY_ENDPOINT_URL}"
      LMSFTP_USERNAME: "${LMSFTP_USERNAME}"
      LMSFTP_PASSWORD: "${LMSFTP_PASSWORD}"
      COUNTRY_A_KEYSTORE_PASSWORD: "${COUNTRY_A_KEYSTORE_PASSWORD}"
      COUNTRY_A_CERTIFICATE_ALIAS: "${COUNTRY_A_CERTIFICATE_ALIAS}"
      COUNTRY_A_KEY_PASSWORD: "${COUNTRY_A_KEY_PASSWORD}"
      COUNTRY_A_KEYSTORE_LOCATION: "${COUNTRY_A_KEYSTORE_LOCATION}"
      OTEL_SERVICE_NAME: "country-a-service"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      OTEL_RESOURCE_ATTRIBUTES: "service.version=${VERSION:-latest}"

    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data
    networks:
      - epps-backend
      - monitoring
    depends_on:
      - jaeger

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.70.0
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Web UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:
