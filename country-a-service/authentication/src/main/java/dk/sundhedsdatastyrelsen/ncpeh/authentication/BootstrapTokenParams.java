package dk.sundhedsdatastyrelsen.ncpeh.authentication;

import lombok.Builder;
import lombok.NonNull;
import org.w3c.dom.Node;

import javax.xml.xpath.XPathExpressionException;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.stream.Stream;

@Builder
public record BootstrapTokenParams(
    @NonNull X509Certificate certificate,
    @NonNull String nameId,
    @NonNull String nameIdFormat,
    List<SamlAttribute> attributes,
    @NonNull String audience
) {
    private static final XPathWrapper xpath = new XPathWrapper(
        XmlNamespaces.WSSE,
        XmlNamespaces.DS,
        XmlNamespaces.SAML);

    public sealed interface SamlAttribute {
        /// Attribute element copied from e.g. HCP assertion
        record Raw(Node node) implements SamlAttribute {}

        /// Attribute generated by this IdP
        record New(String name, String friendlyName, List<String> values) implements SamlAttribute {}
    }

    public static BootstrapTokenParams fromOpenNcpAssertions(OpenNcpAssertions openNcpAssertions, X509Certificate certificate, String audience) throws AuthenticationException {
        try {
            var attributesFromHcp = xpath.evalNodeSet("saml:AttributeStatement/*", openNcpAssertions.hcpAssertion())
                .stream()
                // Workaround for SOSI-STS bugs:
                //  - The STS requires that all element values have xsi:type="CE".  That is not a requirement in eHDSI,
                //    so we add it manually.
                //  - The STS does not accept codeSystem="3bc18518-d305-46c2-a8d6-94bd59856e9e" for PurposeOfUse elements.
                //
                .map(e -> {
                    try {
                        // match all element-children (i.e. not text nodes) of AttributeValue
                        var valueElement = xpath.evalEl("./saml:AttributeValue/*", e);
                        if (valueElement != null) {
                            // xsi:type="CE" is what the Dynamic Request Generator uses
                            XmlUtils.setAttribute(valueElement, XmlNamespaces.XSI, "type", "CE");
                            if ("PurposeOfUse".equals(valueElement.getTagName())) {
                                // workaround for the codeSystem bug:
                                valueElement.setAttribute("codeSystem", "urn:oasis:names:tc:xspa:1.0");
                            }
                        }
                        return e;
                    } catch (XPathExpressionException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                .map(BootstrapTokenParams.SamlAttribute.Raw::new)
                .map(x -> (SamlAttribute) x);

            var patientId = xpath.evalString(
                "saml:AttributeStatement/saml:Attribute[@Name='urn:oasis:names:tc:xspa:1.0:subject:subject-id']/saml:AttributeValue",
                openNcpAssertions.trcAssertion());

            var ncpBstSpecificAttributes = Stream.of(
                new SamlAttribute.New(
                    "urn:oasis:names:tc:xacml:2.0:resource:resource-id",
                    "XUA Patient Id",
                    List.of(patientId)
                ),
                new SamlAttribute.New(
                    "https://data.gov.dk/concept/core/nsis/loa",
                    "NSIS AssuranceLevel",
                    List.of("Substantial")
                ),
                new SamlAttribute.New(
                    "urn:dk:healthcare:saml:SpecVersion",
                    "IDWS XUA SpecVersion",
                    List.of("eHDSI-IDWS-XUA-1.0")
                ),
                new SamlAttribute.New(
                    "urn:dk:healthcare:saml:IssuancePolicy",
                    "IDWS XUA IssuancePolicy",
                    List.of("urn:dk:ncp:eHDSI-default")
                ),
                new SamlAttribute.New(
                    "urn:dk:healthcare:saml:CountryOfTreatment",
                    "EHDSI Country of Treatment",
                    List.of(openNcpAssertions.countryOfTreatment())
                )
            );
            var attributes = Stream.concat(attributesFromHcp, ncpBstSpecificAttributes).toList();
            return BootstrapTokenParams.builder()
                .certificate(certificate)
                .audience(audience)
                .nameIdFormat(xpath.evalString("saml:Subject/saml:NameID/@Format", openNcpAssertions.hcpAssertion()))
                .nameId(xpath.evalString("saml:Subject/saml:NameID", openNcpAssertions.hcpAssertion()))
                .attributes(attributes)
                .build();
        } catch (XPathExpressionException e) {
            throw new AuthenticationException("Error when parsing HCP assertion", e);
        }

    }
}
