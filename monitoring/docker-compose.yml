networks:
  monitoring:
    name: monitoring

services:
  # Jaeger for distributed tracing in an all-in-one configuration with in-memory storage (default configuration)
  jaeger:
    image: jaegertracing/jaeger:2.7.0
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Web UI
    networks:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Memcached for Tempo caching
  memcached:
    image: memcached:1.6-alpine
    container_name: memcached
    restart: unless-stopped
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use
    networks:
      - monitoring

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: &tempoImage grafana/tempo:2.8.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo_data:/var/tempo


  # Grafana Tempo for distributed tracing with local storage
  tempo:
    image: *tempoImage
    container_name: tempo
    restart: unless-stopped
    ports:
      - "16687:16686" # tempo query frontend (avoiding conflict with jaeger)
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./tempo:/etc/tempo
      - tempo_data:/var/tempo
    networks:
      - monitoring
    depends_on:
      - memcached
      - tempo-init

volumes:
  prometheus_data:
  grafana_data:
  tempo_data:
