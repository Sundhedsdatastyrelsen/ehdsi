name: Nightly integration test

on:
  workflow_dispatch:
  schedule:
    - cron: "30 04 * * *"

env:
  # Several jobs, at least "Create a new prescription in FMK" and "Run integration tests", and probably more,
  # need the system certificate.
  CERT_BASE_64: ${{ secrets.CERT_BASE_64 }}
  CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
  CERT_ALIAS: ${{ vars.CERT_ALIAS }}

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5 # for commit history
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven
      - name: Build with Maven
        run:  |
          cd country-a-service
          mvn --batch-mode --projects testing-tools --also-make -DskipUTs package
      - name: Create a new prescription in FMK
        run: |
          java -cp country-a-service/testing-tools/target/testing-tools-1.0.0-SNAPSHOT-shaded.jar \
          dk.sundhedsdatastyrelsen.ncpeh.script.FmkPrescriptionCreator \
          0201909309
      - name: Get the prescription from FMK
        run: |
          java -cp country-a-service/testing-tools/target/testing-tools-1.0.0-SNAPSHOT-shaded.jar \
          dk.sundhedsdatastyrelsen.ncpeh.script.FmkPrescriptionCollector \
          0201909309 \
          target/test-files/get-prescription.xml \
          target/test-files/drug-medication.xml
      - name: Generate ePrescription document
        run: |
          java -cp country-a-service/testing-tools/target/testing-tools-1.0.0-SNAPSHOT-shaded.jar \
          dk.sundhedsdatastyrelsen.ncpeh.script.EPrescriptionCdaGenerator \
          target/test-files/get-prescription.xml \
          target/test-files/drug-medication.xml \
          target/test-files/eprescription-cda.xml

      - name: Set up Docker
        run: sudo service docker start

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # ehealth-portal-edispensation-generator is built at https://github.com/Sundhedsdatastyrelsen/ehealth-portal
      - name: Generate eDispensation CDA
        run: |
          docker pull ghcr.io/sundhedsdatastyrelsen/ehealth-portal-edispensation-generator:generate-edispensation-cli
          docker run \
          -v ${{ github.workspace }}/target/test-files/eprescription-cda.xml:/opt/app/input/ep.xml \
          ghcr.io/sundhedsdatastyrelsen/ehealth-portal-edispensation-generator:generate-edispensation-cli > target/test-files/edispensation-cda.xml

      - name: Log out of GitHub Container Registry
        if: success() || failure() # always run even if the previous step fails
        run: docker logout ghcr.io

      - name: Upload test files
        uses: actions/upload-artifact@v4
        with:
          name: ep-and-ed-files
          path: target/test-files/

      - name: Run integration tests
        # always run even if the previous steps fail. Because many of the integration tests do not depend on the FMK files generated above.
        if: success() || failure()
        run: |
          cd country-a-service
          mvn --batch-mode --projects integration-tests --also-make \
            verify -DskipITs=false -DskipUTs \
            -DeDispensationITPath=${{ github.workspace }}/target/test-files/edispensation-cda.xml
        env:
          LMSFTP_USERNAME: ${{ secrets.LMSFTP_USERNAME }}
          LMSFTP_PASSWORD: ${{ secrets.LMSFTP_PASSWORD }}
          E2E_TRAINING_HOST: ${{ secrets.E2E_TRAINING_HOST }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: 'country-a-service/integration-tests/target/failsafe-reports/TEST-*.xml'
          check_name: Integration Test Report

      - name: Prepare commit history
        if: failure() # only post on slack if tests fail
        # The "jq" command escapes the strings for json transport
        run: |
          COMMIT_LOG=$(git log -5 \
            --pretty=format:'<https://github.com/${{ github.repository }}/commit/%h|%h> - %s (%an)')
          echo "COMMIT_LOG=$(jq -Rn --arg str "$COMMIT_LOG" '$str')" >> $GITHUB_ENV

          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.27.0
        if: failure() # only post on slack if tests fail
        # See: https://github.com/slackapi/slack-github-action?tab=readme-ov-file#technique-2-slack-app
        with:
          # channel-id: 'C07Q2AG46HL' # #github-actions-bot-test
          channel-id: 'C079YA9DB61' # #github-notifications
          payload: |
            {
              "attachments": [
                {
                  "fallback": "Test Results Report - ${{ github.repository }}",
                  "color": "danger",
                  "title": ":warning: Integration Test Failure Alert",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "text": "Nightly integration test run in *${{ github.repository }}* failed. Check the <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions details>.",
                  "fields": [
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Recent Commits",
                      "value": ${{ env.COMMIT_LOG }}
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": ${{ env.TIMESTAMP }}
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
