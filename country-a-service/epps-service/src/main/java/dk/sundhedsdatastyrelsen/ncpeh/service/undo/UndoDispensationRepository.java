package dk.sundhedsdatastyrelsen.ncpeh.service.undo; import org.springframework.dao.DuplicateKeyException; import org.springframework.dao.EmptyResultDataAccessException; import org.springframework.jdbc.UncategorizedSQLException; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.jdbc.core.RowMapper; import org.sqlite.SQLiteErrorCode; import org.sqlite.SQLiteException; import javax.sql.DataSource; import java.time.Instant; import java.time.ZoneOffset; import java.time.format.DateTimeFormatter; public class UndoDispensationRepository { private final JdbcTemplate jdbcTemplate; public UndoDispensationRepository(DataSource dataSource) { this.jdbcTemplate = new JdbcTemplate(dataSource); } public void insert(UndoDispensationRow dispensation) { if (dispensation.timestamp() != null) { throw new IllegalArgumentException("timestamp value should be null when inserting UndoDispensationRow"); } String sql = "INSERT INTO undo_dispensation (cda_id_hash, order_id, effectuation_id) VALUES (?, ?, ?)"; try { jdbcTemplate.update(sql, dispensation.cdaIdHash(), dispensation.orderId(), dispensation.effectuationId()); } catch (UncategorizedSQLException e) { if (e.getSQLException() instanceof SQLiteException sqlEx && SQLiteErrorCode.SQLITE_CONSTRAINT_PRIMARYKEY.equals(sqlEx.getResultCode())) { throw new DuplicateKeyException("Primary key constraint violation", sqlEx); } throw e; } } public UndoDispensationRow findByCdaId(String cdaId) { return findByCdaIdHash(UndoDispensationRow.cdaIdHash(cdaId)); } private UndoDispensationRow findByCdaIdHash(String cdaIdHash) { String sql = "SELECT * FROM undo_dispensation WHERE cda_id_hash = ?"; try { return jdbcTemplate.queryForObject(sql, rowMapper, cdaIdHash); } catch (EmptyResultDataAccessException e) { return null; } } public void deleteByCdaId(String cdaId) { deleteByCdaIdHash(UndoDispensationRow.cdaIdHash(cdaId)); } public void deleteByCdaIdHash(String cdaIdHash) { String sql = "DELETE FROM undo_dispensation WHERE cda_id_hash = ?"; var deleted = jdbcTemplate.update(sql, cdaIdHash); if (deleted == 0) { throw new EmptyResultDataAccessException( String.format("No dispensation found with CDA ID hash '%s'", cdaIdHash), 1); } } public long deleteOlderThan(Instant timestamp) { String sql = "DELETE FROM undo_dispensation WHERE timestamp < ?"; var formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); String formattedTimestamp = timestamp.atOffset(ZoneOffset.UTC).toLocalDateTime().format(formatter); return jdbcTemplate.update(sql, formattedTimestamp); } private final RowMapper<UndoDispensationRow> rowMapper = (rs, rowNumber) -> new UndoDispensationRow( rs.getString("cda_id_hash"), rs.getLong("effectuation_id"), rs.getLong("order_id"), rs.getTimestamp("timestamp").toLocalDateTime().atZone(ZoneOffset.UTC).toInstant() ); } 