package dk.sundhedsdatastyrelsen.ncpeh.cda.model; import dk.sundhedsdatastyrelsen.ncpeh.cda.Either; import dk.sundhedsdatastyrelsen.ncpeh.cda.Utils; import lombok.NonNull; import lombok.Value; import java.math.BigDecimal; import java.text.DecimalFormat; import java.text.DecimalFormatSymbols; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.Locale; public sealed interface Dosage { DecimalFormat decimalFormat = new DecimalFormat("0.##", new DecimalFormatSymbols(Locale.US)); @NonNull String getTag(); @NonNull String getUnstructuredText(); Quantity getQuantity(); @Value class Unstructured implements Dosage { String tag = "Unstructured"; @NonNull String unstructuredText; String reason; public Quantity getQuantity() { return null; } } @Value class PeriodicInterval implements Dosage { String tag = "PeriodicInterval"; @NonNull String unstructuredText; boolean institutionSpecified; @NonNull Period period; Quantity quantity; } @Value class EventInterval implements Dosage { String tag = "EventInterval"; @NonNull String unstructuredText; @NonNull EventEnum event; Quantity quantity; } @Value class Once implements Dosage { String tag = "Once"; @NonNull String unstructuredText; @NonNull Either<LocalDate, ZonedDateTime> timeValue; Quantity quantity; public String getTimeValue() { return timeValue.match(Utils::cdaDate, Utils::cdaTs); } } @Value class Unbounded implements Dosage { String tag = "Unbounded"; @NonNull String unstructuredText; Quantity quantity; } sealed interface Period { @NonNull String getTag(); @Value class Simple implements Period { String tag = "Simple"; @NonNull String unit; @NonNull BigDecimal value; public String getValue() { return decimalFormat.format(value); } } } @Value class Quantity { @NonNull BigDecimal value; @NonNull Unit unit; BigDecimal minValue; public String getValue() { return decimalFormat.format(value); } public String getMinValue() { return decimalFormat.format(minValue != null ? minValue : value); } } interface Unit { @NonNull String getTag(); @Value class Translated implements Unit { @NonNull String tag = "Translated"; @NonNull String translation; } } enum EventEnum { AC("AC"), ACD("ACD"), ACM("ACM"), ACV("ACV"), HS("HS"), IC("IC"), ICD("ICD"), ICM("ICM"), ICV("ICV"), PC("PC"), PCD("PCD"), PCM("PCM"), PCV("PCV"); private final String value; EventEnum(String v) { value = v; } public String value() { return value; } public static EventEnum fromValue(String v) { for (EventEnum ee : EventEnum.values()) { if (ee.value.equals(v)) { return ee; } } throw new IllegalArgumentException(v); } } } 